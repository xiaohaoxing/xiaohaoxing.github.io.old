<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>PySpark 功能介绍</title>
      <link href="/2019/04/22/Spark-%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/04/22/Spark-%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark:"></a>Spark:</h2><p>  是一个轻量级、快速的实时处理框架。内存计算来实时分析数据。Hadoop 只做批处理流程，缺乏实时的特点。Spark 可以做实时流处理，同时也关注批处理流程。</p><p>  除了实时和批处理，Spark 还支持交互查询和交互算法。Spark 有自己运行应用的集群管理。影响着 Hadoop 的储存和运行。使用 HDFS 格式储存，也可以在 <strong>YARN</strong> 上运行 Spark 应用。</p><h2 id="PySpark："><a href="#PySpark：" class="headerlink" title="PySpark："></a>PySpark：</h2><p>  Spark 是用 Scala 写的。Spark 社区为 Python 的支持写了一个工具：PySpark。使用 PySpark，就可以用 Python 语言跑 RDD 的 API，这是 Py4j 库的功劳。</p><p>  PySpark 提供 PySpark Shell 用来连接 Python 的 API 和 Spark 的核心，并初始化 Spark 环境。现在大部分数据科学家和数据分析专家都用 python，因为它有丰富的库。将 Python 和 Spark 结合对他们来说是个福音。</p><a id="more"></a><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><p><strong>（python 这一步可以直接用</strong> <strong>命令</strong> <strong>：</strong> <strong>pip install pyspark完成安装</strong> <strong>。）</strong></p><p>  假设已经安装了 Java 和 Scala 环境，如下步骤是安装 PySpark 的：</p><ol><li><p>官网下载页面去下载最新版本的 Spark</p></li><li><p>wget  <a href="https://...XXX/XXX/Spark.tar.gz" target="_blank" rel="noopener">https://...XXX/XXX/Spark.tar.gz</a></p></li><li><p>解压 tar 文件，配置环境变量（假设解压到了/User/me/Applications/目录下）：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SPARK_HOME = /User/me/Applications/spark-2.1.0</span><br><span class="line">PATH = <span class="variable">$PATH</span>:<span class="variable">$SPARK_HOME</span>/bin</span><br><span class="line">PYTHONPATH = <span class="variable">$SPARK_HOME</span>/python:<span class="variable">$SPARK_HOME</span>/python/lib/py4j-0.xx.xx:<span class="variable">$PYTHONPATH</span></span><br><span class="line">PATH = <span class="variable">$SPARK_HOME</span>/python:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>  上述的设置在 linux 系统上可以用 export 命令去设置，可以写一个批处理文件：bashrc 后缀名的批处理文件。再用 source .bashrc 命令去运行批处理，就一次性设置所有环境变量了。</p><p>  再运行./bin/pyspark 命令就可以打开PySpark Shell 界面了。</p><h1 id="三、Spark-上下文对象：SparkContext"><a href="#三、Spark-上下文对象：SparkContext" class="headerlink" title="三、Spark 上下文对象：SparkContext"></a>三、Spark 上下文对象：SparkContext</h1><p>  SparkContext 是任何 Spark 功能的入口。运行Spark 应用的时候，先启动一个驱动程序，包含一个主函数，SparkContext 在这里初始化。然后驱动程序再在工人节点上的执行器内执行操作。</p><p>  SparkContext 通过Py4J 启动 JVM，创建一个 JavaSparkContext 对象。默认PySpark 提供一个 SparkContext 对象，名字是 ‘sc’，所以创建新的 SparkContext 不会生效。</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/pyspark-principle.png" alt="Data Flow  : Local  SparkContext  Local FS  : Cluster  Spark  Worker  O  py4J  Socket  SparkContext  Spark  Worker  O  O  Python  Pipe  O  JVM "></p><p>  这个数据流图描述的是 PySpark 和 JVM 所负责的部分的数据流。可以看出：JVM 负责了主机和分机的交互。而 python 做了最上层和最底层的具体工作。</p><p><strong>SparkContext 的结构：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pyspark</span>.<span class="title">SparkContext</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">master = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    appName = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    sparkHome = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    pyFiles = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    environment = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    batchSize = <span class="number">0</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    serializer = PickleSerializer<span class="params">()</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    conf = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    gateway = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    jsc = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    profiler_cls = &lt;class<span class="string">'pyspark.profiler.BasicProfiler'</span>&gt;</span></span></span><br><span class="line"><span class="class"><span class="params"> )</span></span></span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Master</td><td>分机连接的 URL</td></tr><tr><td>appName</td><td>工作的名称</td></tr><tr><td>sparkHome</td><td>Spark 安装目录</td></tr><tr><td>pyFiles</td><td>发送给分机或添加到 PYTHONPATH 目录的 zip 或 py 文件</td></tr><tr><td>Environment</td><td>工作节点的环境变量</td></tr><tr><td>batchSize</td><td>多少个 Python 对象表示一个 Java 对象。      1： 关闭批处理      0：   自动选择      -1： 不限批处理大小</td></tr><tr><td>Serializer</td><td>RDD 序列化</td></tr><tr><td>Conf</td><td>设置 Spark 所有参数的L{SparkConf}对象</td></tr><tr><td>Gateway</td><td>使用现有的网关和   JVM，否则创建新的 JVM</td></tr><tr><td>JSC</td><td>JavaSparkContext   实例</td></tr><tr><td>profiler_cls</td><td>个性化配置的类，默认的是pyspark.profiler.BasicProfiler</td></tr></tbody></table></div><p>  上述的参数，master 和 appname 是最常用的，示例初始化代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line">sc = SparkContext</span><br></pre></td></tr></table></figure><p><strong>第一个例子</strong></p><p>  现在尝试对下载的 Spark 里的readme.md 做一个统计：有’a’ 和有’b’ 各自的行数是多少。</p><p>  在Spark Shell 逐行写入如下的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logFile = <span class="string">"file:///User/me/Applications/spark-2.1.0/README.md"</span></span><br><span class="line">logData = sc.textFile(logFile).cache()</span><br><span class="line">numAs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'a'</span> <span class="keyword">in</span> s).count()</span><br><span class="line">numBs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'b'</span> <span class="keyword">in</span> s).count()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Lines with a: %i, lines with b: %i"</span> % (numAs, numBs)</span><br></pre></td></tr></table></figure><p>  可以得到输出结果：”Lines with a: 62, lines with b:30”</p><p><strong>第二个例子</strong></p><p>  上述的例子直接在 shell 里写。现在写一个 python 文件去做。</p><ol><li><p>首先写 firstapp.py，内容同上（加上 import 语句）。</p></li><li><p>然后运行命令：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$SPARK_HOME</span>/bin/spark-submit firstapp.py</span><br></pre></td></tr></table></figure><p>  也可以得到上述的输出结果。</p><h1 id="四、RDD"><a href="#四、RDD" class="headerlink" title="四、RDD"></a>四、RDD</h1><p>  在 Spark 平台上编写 Python 代码之前需要了解一个Spark非常重要的概念：RDD</p><p>  RDD 全称是：Resilient Distributed Dataset，弹性分布式数据集。元素（等同于数据库中一条记录）在多个分机节点上并行运行和操作。RDD 是不可变元素，就是当你创建了 RDD 就不可以再改变他了。RDD 也有容错，为了避免任何错误，他们会自动恢复。你可以将一个具体的任务在 RDD 上分配复杂的操作。</p><p>  有2类操作在 RDD 上分配任务：</p><ol><li><p><strong>转换</strong>（Transformation）</p><p>在 RDD 上创建新的 RDD，Filter、groupBy 和 map 都是转换的操作。</p></li><li><p><strong>执行</strong>（Action）</p><p>在 RDD 上执行操作，让 Spark 去计算并把结果发给驱动。</p><p>先创建一个 PySpark RDD，下面是 PySpark RDD 对象的结构</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pyspark</span>.<span class="title">RDD</span> <span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">jrdd,</span></span></span><br><span class="line"><span class="class"><span class="params">  ctx,     </span></span></span><br><span class="line"><span class="class"><span class="params">  jrdd_deserializer = AutoBatchedSerializer<span class="params">(PickleSerializer<span class="params">()</span>)</span> </span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>  用如下 python 代码创建一个数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">words = sc.parallelize (</span><br><span class="line">[<span class="string">"scala"</span>,     </span><br><span class="line"><span class="string">"java"</span>,     </span><br><span class="line"><span class="string">"hadoop"</span>,    </span><br><span class="line">    <span class="string">"spark"</span>,    </span><br><span class="line">    <span class="string">"akka"</span>,    </span><br><span class="line">    <span class="string">"spark vs hadoop"</span>,    </span><br><span class="line">    <span class="string">"pyspark"</span>,   </span><br><span class="line">    <span class="string">"pyspark and spark"</span>] </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>  对这个数据集的操作：</p><div class="table-container"><table><thead><tr><th>函数</th><th>释义</th></tr></thead><tbody><tr><td>count()</td><td>返回这个数据集包含数据的数量</td></tr><tr><td>collect()</td><td>返回整个数据集</td></tr><tr><td>foreach(f)</td><td>逐个数据操作（f:自定义函数)</td></tr><tr><td>filter(f)</td><td>筛选</td></tr><tr><td>map(f,preservesPartitioning = False)</td><td>逐个数据操作并得到新的 RDD(如：给每个元素赋一个权重1 words.map(lambda x: (x, 1))</td></tr><tr><td>reduce(f)</td><td>特定的交互和结合二元操作后，元素被返回给 RDD。   from operator import add      nums.reduce(add)</td></tr><tr><td>join(other,   numPartitions=None)</td><td>很像SQL   的 join。同一个 key 的 value   会被合并得到同一个 key 对应一组 value。   x = sc.parallelize([(“spark”, 1),   (“hadoop”, 4)])      y = sc.parallelize([(“spark”, 2), (“hadoop”, 5)])      joined = x.join(y)       (‘spark’, (1, 2))</td></tr><tr><td>cache()</td><td>持久化储存   RDD，默认的级别是 MEMORY_ONLY   持久化：words.cache()       检查持久化：caching = words.persist().is_cached</td></tr></tbody></table></div><h1 id="五、广播和累加器"><a href="#五、广播和累加器" class="headerlink" title="五、广播和累加器"></a>五、广播和累加器</h1><p>  Spark 为并行处理提供变量共享。当驱动发送一个任务到分机上的执行器时，共享变量的拷贝就在分机的每一个节点上，以用来运行任务。</p><p>  Spark 有2中共享变量的支持方法：</p><ol><li>广播（Broadcast）</li><li>累加器（Accumulator）</li></ol><p><strong>广播</strong> <strong>：</strong></p><p>  广播变量用来在所有节点上保存变量的拷贝。该变量缓存在所有机器上，并不随着任务分发到机器上。下面是 Broadcast 类的具体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pyspark</span>.<span class="title">Broadcast</span> <span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    sc = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    value = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    pickle_registry = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    path = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>  创建广播变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words_new = sc.broadcast([<span class="string">"scala"</span>, <span class="string">"java"</span>, <span class="string">"hadoop"</span>, <span class="string">"spark"</span>, <span class="string">"akka"</span>])</span><br></pre></td></tr></table></figure><p><strong>累加器</strong> <strong>：</strong></p><p>  累加器变量通过组合和交互操作进行信息统计。比如，可以做累加操作或者计数操作。下面是  Accumulator 类的具体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pyspark</span>.<span class="title">Accumulator</span><span class="params">(aid, value, accum_param)</span></span></span><br></pre></td></tr></table></figure><p>  累加器变量有一个 value 用来保存数据，并返回累加器的值，只能用在驱动程序中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = sc.accumulator(<span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span>     </span><br><span class="line"><span class="keyword">global</span> num     </span><br><span class="line">num+=x </span><br><span class="line">rdd.foreach(f)</span><br></pre></td></tr></table></figure><p>  这里 num 就是累加器变量。</p><h1 id="六-、SparkConf"><a href="#六-、SparkConf" class="headerlink" title="六 、SparkConf"></a><strong>六</strong> <strong>、SparkConf</strong></h1><p>  运行 Spark 应用需要的配置信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pyspark</span>.<span class="title">SparkConf</span> <span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    loadDefaults = True, </span></span></span><br><span class="line"><span class="class"><span class="params">    _jvm = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    _jconf = None</span></span></span><br><span class="line"><span class="class"><span class="params"> )</span></span></span><br></pre></td></tr></table></figure><p>  首先用SparkConf()创建一个 SparkConf 对象，加载 Java 环境 spark.*所有的值。现在可以用这个对象设置不同的参数值，优先级会比系统配置优先级高。<br>  SparkConf 类有设值方法，并且支持链式调用：conf.setAppName(“PySpark App”).setMaster(“local”)。一旦把 SparkConf 对象传入Spark，就不能被任何用户修改了。</p><p>  常用方法：</p><div class="table-container"><table><thead><tr><th>方法</th></tr></thead><tbody><tr><td>set(key,   value)</td></tr><tr><td>setMaster(value)</td></tr><tr><td>setAppName(value)</td></tr><tr><td>get(key,   defaultValue=None)</td></tr><tr><td>setSparkHome(value)</td></tr></tbody></table></div><p>  如：AppName 设置为”PySpark App”，Master 设置为”spark://master:7077”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext </span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"PySpark App"</span>).setMaster(<span class="string">"spark://master:7077"</span>) </span><br><span class="line">sc = SparkContext(conf=conf)</span><br></pre></td></tr></table></figure><h1 id="七-、SparkFile"><a href="#七-、SparkFile" class="headerlink" title="七 、SparkFile"></a><strong>七</strong> <strong>、SparkFile</strong></h1><p>通过SparkContext.addFile()方法添加的文件会在 Spark 中添加缓存文件，所有操作在此文件上，因此可以通过以下方法获取该缓存文件的位置。</p><table><tr><td>SparkFile.get(filename)</td><td>通过SparkContext.addFile()方法添加的文件的路径</td></tr><tr><td>SparkFile.getrootdirectory()</td><td>通过SparkContext.addFile()方法添加的文件的根目录</td></tr></table><h1 id="八、StorageLevel"><a href="#八、StorageLevel" class="headerlink" title="八、StorageLevel**"></a>八、StorageLevel**</h1><p>文件在内存和硬盘上的存储计划，具体不是我们关注的内容，感兴趣可以去<a href="https://www.tutorialspoint.com/pyspark/pyspark_storagelevel.htm" target="_blank" rel="noopener">源教程</a>中看一下。</p><h1 id="九、机器学习库（MLlib）"><a href="#九、机器学习库（MLlib）" class="headerlink" title="九、机器学习库（MLlib）"></a><strong>九、机器学习库（MLlib）</strong></h1><p>包括：</p><ol><li>mllib.classification：提供多种二分类、多重分类和回归分析的方法。包括：随机森林、朴素贝叶斯、决策树等。</li><li>mllib.clustering：基于一些相似度的概念对实体进行子集聚集是一个非监督学习问题。</li><li>mllib.fpm：频繁模式匹配（Frequent Pattern      Matching)是挖掘频繁项、组、子序列或其他子集形式，通常用在分析大维度的数据集的第一步。是数据挖掘的近年的研究热点。</li><li>mllib.linalg：mllib 的线性代数工具库</li><li>mllib.recommendation：推荐系统中常用的协同过滤。用来填充用户-元素关联矩阵的空缺位置。</li><li>spark.mllib：最新的支持基于模型的协同过滤，用户和产品被描述成潜在因子的小集合，用来预测缺失的元素，使用交替最小二乘（Alternating Least      Squares-ALS）算法去学习这些潜在因子。</li><li>mllib.regression：线性回归是回归算法中的一种。回归的目标是找到变量间的关系和依赖。关于线性回归模型和模型总结的接口和逻辑回归相似。</li></ol><p>一个交替最小二乘的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.mllib.recommendation <span class="keyword">import</span> ALS, MatrixFactorizationModel, Rating</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  sc = SparkContext(appName=<span class="string">"Pspark mllib Example"</span>)</span><br><span class="line">  data = sc.textFile(<span class="string">"test.data"</span>)</span><br><span class="line">  ratings = data.map(<span class="keyword">lambda</span> l: l.split(<span class="string">','</span>))\</span><br><span class="line">    .map(<span class="keyword">lambda</span> l: Rating(int(l[<span class="number">0</span>]), int(l[<span class="number">1</span>]), float(l[<span class="number">2</span>])))</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># Build the recommendation model using Alternating Least Squares</span></span><br><span class="line">  rank = <span class="number">10</span></span><br><span class="line">  numIterations = <span class="number">10</span></span><br><span class="line">  model = ALS.train(ratings, rank, numIterations)</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># Evaluate the model on training data</span></span><br><span class="line">  testdata = ratings.map(<span class="keyword">lambda</span> p: (p[<span class="number">0</span>], p[<span class="number">1</span>]))</span><br><span class="line">  predictions = model.predictAll(testdata).map(<span class="keyword">lambda</span> r: ((r[<span class="number">0</span>], r[<span class="number">1</span>]), r[<span class="number">2</span>]))</span><br><span class="line">  ratesAndPreds = ratings.map(<span class="keyword">lambda</span> r: ((r[<span class="number">0</span>], r[<span class="number">1</span>]), r[<span class="number">2</span>])).join(predictions)</span><br><span class="line">  MSE = ratesAndPreds.map(<span class="keyword">lambda</span> r: (r[<span class="number">1</span>][<span class="number">0</span>] - r[<span class="number">1</span>][<span class="number">1</span>])**<span class="number">2</span>).mean()</span><br><span class="line">  print(<span class="string">"Mean Squared Error = "</span> + str(MSE))</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># Save and load model</span></span><br><span class="line">  model.save(sc, <span class="string">"target/tmp/myCollaborativeFilter"</span>)</span><br><span class="line">  sameModel = MatrixFactorizationModel.load(sc, <span class="string">"target/tmp/myCollaborativeFilter"</span>)</span><br></pre></td></tr></table></figure><p>  运行命令：$SPARK_HOME/bin/spark-submit recommend.py</p><p>  输出结果：Mean Squared Error = 1.20536041839e-05</p><h1 id="十、序列器"><a href="#十、序列器" class="headerlink" title="十、序列器"></a><strong>十、序列器</strong></h1><p>  序列化在 Spark 中用来性能调优。所有通过网络发送的、写在硬盘上、持久化在内存中的数据都应该要序列化。序列化在代价高操作中扮演重要角色。</p><p>  PySpark 支持性能调优中的自定义序列器。支持2类序列器：</p><ol><li>MarshalSerializer：速度更快，但是支持的数据类型少。</li><li>PickleSerializer：几乎所有 Python 对象，但是不如上面的快。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> pyspark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot 项目application.properties配置详情</title>
      <link href="/2019/01/09/Spring-Boot-%E9%A1%B9%E7%9B%AEapplication-properties%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85/"/>
      <url>/2019/01/09/Spring-Boot-%E9%A1%B9%E7%9B%AEapplication-properties%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>本篇文章是对笔者的项目<a href="https://github.com/xiaohaoxing/SpringBootBook" target="_blank" rel="noopener">SpringBootBook</a>的配置文件备份。由于配置文件中有一些个性化的配置不能通用，如果放在项目中，不仅对于使用者来说无法运行，更会泄漏隐私，因此把配置项放在这里备份。运行之前请把内容复制放到项目的<code>src/main/resources/application.properties</code>文件内。</p><a id="more"></a><p>内容如下：</p><h3 id="src-main-resources"><a href="#src-main-resources" class="headerlink" title="src/main/resources/"></a>src/main/resources/</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Thymeleaf编码</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"># 热部署静态文件</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"># 使用 HTML5 标准</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br><span class="line"></span><br><span class="line">server.port=8081</span><br><span class="line"></span><br><span class="line">logging.level.root=info</span><br><span class="line"></span><br><span class="line">spring.h2.console.enabled=true</span><br><span class="line"># the data source</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost/blog?useSSL=false&amp;serverTimezone=UTC&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=[你自己的密码/Your mysql password]</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line"># JPA</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line">spring.jpa.hibernate.ddl-auto=create-drop</span><br><span class="line"></span><br><span class="line"># Elastic Search 服务地址</span><br><span class="line">spring.data.elasticsearch.cluster-nodes=localhost:9300</span><br><span class="line"># 连接超时</span><br><span class="line">spring.data.elasticsearch.properties.transport.tcp.connect_timeout=120s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot 部署记录</title>
      <link href="/2019/01/07/SpringBoot-%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/01/07/SpringBoot-%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;跟着书上的教程完成了一个简单的SpringBoot的用户管理的项目。想用github来实现版本控制，同时接触一点简单的发布版本的知识。所以打算发布一个RELEASE试试。<br><a id="more"></a></p><h1 id="1-发布"><a href="#1-发布" class="headerlink" title="1. 发布"></a>1. 发布</h1><p>&nbsp;&nbsp;在mac的IntelliJ IDEA将项目同步到github上，然后给这个commit发布了一个RELEASE。具体的发布RELEASE其实没有什么知识，跟着github的指引就行了：选择一个branch，填写版本号（建议的命名格式：v1,0，v1.1-alpha等），填写发布信息（增加了什么功能，有哪些修改等信息），添加版本附件（比如desktop应用的exe，java的包jar或war等），就可以直接发布了。</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/release-config.jpg" alt="版本发布编辑界面"></p><p>&nbsp;&nbsp;但是我build的jar包一直上传失败！客户端只能先编译再部署了！</p><h1 id="2-部署"><a href="#2-部署" class="headerlink" title="2. 部署"></a>2. 部署</h1><p>&nbsp;&nbsp;紧接着就需要在客户机上部署了。切换到windows机器上，先在浏览器上下载下来source code 包（包括zip格式和tar.gz格式）。这里为了方便我直接用windows的winzip软件解压了，而没有用Linux的解压命令。然后打开Windows Subsystem Linux，开始从源码构建部署项目。<br>&nbsp;&nbsp;我开始就用的开发机上的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行 build</span></span><br><span class="line">gradle build</span><br></pre></td></tr></table></figure></p><p>命令去运行，提示：command gradle not found! 赶紧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 gradle</span></span><br><span class="line">sudo apt-get install gradle</span><br></pre></td></tr></table></figure></p><p>装一下gradle。重新运行上述命令：build failed! Need gradle version 4.4+,found 3.4.这就很奇怪了，我用apt-get获取的为什么还不是最新版本的？改用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 明确版本</span></span><br><span class="line">sudo apt-get install gradle=4.4</span><br></pre></td></tr></table></figure></p><p>提示：version 4.4 not found! 难道linux的gradle版本系列和mac上的不同？这时候想到书上看过的一条信息：用gradlew（Linux系统）或者gradlew.bat命令运行Gradle Wrapper脚本，就可以规避由环境不一致引起的编译失败问题！（书上的坑都被我踩了个遍！）于是去运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gradle 构建环境的搭建</span></span><br><span class="line">./gradlew</span><br></pre></td></tr></table></figure></p><p>运行成功！然后用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正式的 build</span></span><br><span class="line">./gradlew build</span><br></pre></td></tr></table></figure></p><p>去重新构建项目。<br>&nbsp;&nbsp;等待Build Success信息出来。这时候项目目录下就已经生成了build目录，打开build/lib， 看到我们的项目生成的jar包已经在这里了！执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署项目</span></span><br><span class="line">java -jar SpringBootBook-1.1.0.RELEASE.jar</span><br></pre></td></tr></table></figure></p><p>去部署项目！<br><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/deploy-result.jpg" alt="部署结果"></p><h1 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h1><p>&nbsp;&nbsp;等控制台显示出:Started Application in XX.XX s.就表示项目已经成功部署在机器上了！这时候去访问网页就能看到项目的结果了：<br><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/run-result.jpg" alt="运行结果"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>&nbsp;&nbsp;以上就是项目的一个版本从发布到部署运行的全过程，可能会有一些坑需要踩。不过我个人觉得 Gradle 提供的构建方式对部署已经非常友好了，以上的过程基本比较顺利的一晚上就完成了。和 github 的 release 配合起来对于运维来说体验极好！该项目后续更多的是对 Spring Boot 的深入探究，部署过程将不再是重点了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库中 Blob 数据类型探究</title>
      <link href="/2018/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD-Blob-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%8E%A2%E7%A9%B6/"/>
      <url>/2018/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD-Blob-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    晚上，室友在谈到今天面试的时候说到面试官提问如何在数据库中保存图像。他回答文件操作并保存路径，结果并不是面试官想要的结果，提示使用 Blob 数据类型。我对此就产生了兴趣，于是就有了今晚的一系列探究。</p><h2 id="一、Blob-类型是什么"><a href="#一、Blob-类型是什么" class="headerlink" title="一、Blob 类型是什么"></a>一、Blob 类型是什么</h2><p>​    Blob 全称 Binary Large Object，二进制大对象，是一个可以储存二进制文件的容器。按照设计者的想法，它存在的目的是想让文件管理器不去理会数据是什么，而去关系如何处理它。</p><p>​    Blob 类型应用在数据库中常见一共有4种类型：TinyBlob，Blob，MediumBlob，LongBlob。分别能储存的大小为：255B，64KB，16MB，4GB。而且 Java 编程语言中 SQL 库也对其有较为友好的支持。让我感觉储存图像信息有了新的解决方案。</p><a id="more"></a><p>​    以往做 web 项目的时候，上传用户头像这种图像信息一般都采用表单上传，文件保存，生成 UUID，保存路径+文件名字段在 UserInfo 表中这一系列方式去实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object i : items) &#123;</span><br><span class="line">    FileItem item = (FileItem) i;</span><br><span class="line">    <span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">        String fullName = item.getName();</span><br><span class="line">        <span class="comment">//取得上传文件以后的存储路径</span></span><br><span class="line">        String appendix = fullName.substring((fullName.lastIndexOf(<span class="string">'.'</span>)), fullName.length());</span><br><span class="line">        <span class="comment">//图像文件名采用对 rid + uid 的32位 MD5 编码，充分散列。</span></span><br><span class="line">        img = utils.Encoder.string2MD5(<span class="string">""</span> + rid + uid) + appendix;</span><br><span class="line">        <span class="comment">//上传文件以后的存储路径</span></span><br><span class="line">        String path = request.getRealPath(<span class="string">"/img/custom"</span>) + File.separatorChar + img;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件</span></span><br><span class="line">        File uploaderFile = <span class="keyword">new</span> File(path);</span><br><span class="line">        item.write(uploaderFile);</span><br><span class="line">        <span class="comment">//上传成功信息</span></span><br><span class="line">        System.out.println(<span class="string">"custom上传成功！文件位置："</span> + path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//params正常，插入数据库</span></span><br><span class="line">CustomDesign.addOne(rid, uid, <span class="string">"/img/custom/"</span>+img, desp, title);</span><br><span class="line">MessageDispatcher.message(response, <span class="string">"success"</span>, <span class="string">"上传成功！"</span>, <span class="string">"require_detail.jsp?rid="</span> + rid);</span><br></pre></td></tr></table></figure><p>​    现在了解到有这种数据类型之后就可以尝试一下新的方式。</p><h2 id="二、使用-Blob-保存文件"><a href="#二、使用-Blob-保存文件" class="headerlink" title="二、使用 Blob 保存文件"></a>二、使用 Blob 保存文件</h2><p>​    因为 Blob 类型数据可能会很大，而且是流式，因此<code>Statement.execute(String)</code>的方式不能传递数据，因此需要使用<code>java.util.sql.PreparedStatement</code>的占位符实现 Blob 对象的传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHeaderTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> uid = <span class="number">1</span>;</span><br><span class="line">        Connection conn;</span><br><span class="line">        PreparedStatement statement;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"/Users/XX/Downloads/test.jpg"</span>);</span><br><span class="line">        <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">            InputStream out = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            Class.forName(CLASS_NAME).newInstance();</span><br><span class="line">            conn = DriverManager.getConnection(CONNECTION + <span class="string">"/"</span> + DB_NAME + <span class="string">"?user="</span> + username + <span class="string">"&amp;password="</span> + password);</span><br><span class="line">            statement = conn.prepareStatement(<span class="string">"INSERT INTO user_header VALUES(?, ?);"</span>);</span><br><span class="line">            statement.setInt(<span class="number">1</span>, uid);</span><br><span class="line">            statement.setBlob(<span class="number">2</span>, out);</span><br><span class="line">            <span class="keyword">int</span> result = statement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"success."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"failed."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"file not exist."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    这部分代码没有什么复杂的地方，只是个简单的执行 SQL 的过程。就不解释了。最后的结果在控制台显示”success.”，进入到数据库中也有相应的字段和数据内容。</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/Blob_data.png" alt="MySQL workbench 显示 Blob 数据内容"></p><h2 id="三、读取-Blob-到-web"><a href="#三、读取-Blob-到-web" class="headerlink" title="三、读取 Blob 到 web"></a>三、读取 Blob 到 web</h2><p>​    按说这种数据类型探究到这里就差不多了，但是遇到新事物总不想浅尝辄止，于是我又想到了一个常见的应用场景：如何在数据库中读取到 Blob 类型的图像，并且显示在页面上呢？</p><p>​    好的设计应该是对上层隐藏细节，最好的接口方式应该是：提供一个RESTful API，访问接口就会返回一个ContentType 为 image 的图像文件。这样前端开发者只要在页面显示图像位置丢一个 URI，图像就会显示出来。使用体验和使用图像文件一样无忧。</p><p>​    这样一来，这个接口的基本结构就差不多如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHeaderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/header"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHeader</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        String s_uid = request.getParameter(<span class="string">"uid"</span>);</span><br><span class="line">        Connection conn;</span><br><span class="line">        PreparedStatement statement;</span><br><span class="line">        <span class="keyword">int</span> uid = Integer.parseInt(s_uid);</span><br><span class="line">        <span class="comment">// 说明文档类型</span></span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        ……</span><br><span class="line">        ……</span><br><span class="line">        ……</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    剩下就是如何在数据库中读取数据并返回:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">statement = conn.prepareStatement(<span class="string">"SELECT header FROM user_header WHERE uid = ?"</span>);</span><br><span class="line">statement.setInt(<span class="number">1</span>, uid);</span><br><span class="line">ResultSet rs = statement.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">    Blob result = rs.getBlob(<span class="number">1</span>);</span><br><span class="line">    InputStream blobIn = result.getBinaryStream();</span><br><span class="line">    OutputStream out = response.getOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) result.length()];</span><br><span class="line">    blobIn.read(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    out.write(bytes);</span><br><span class="line">    out.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    启动 tomcat 运行 servlet 容器，并且在浏览器中访问<a href="#">localhost:8080/header?uid=1</a>，就可以看到刚刚上传的图像啦。</p><h3 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h3><p>​    📝一定要注意：普通的 Blob 类型，只有64KB 的容量！实际上这个容量非常小，我这边一个600*600的表情包都超过了容量，导致储存的 Blob 字段数据是残缺的，浪费了很多时间排查错误……</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java 如何选择最具体的方法执行（翻译）</title>
      <link href="/2018/09/26/java-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E6%9C%80%E5%85%B7%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/"/>
      <url>/2018/09/26/java-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E6%9C%80%E5%85%B7%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>  方法调用的时候，有2个以上的成员方法都是可访问且适配，就必须要为运行时选择一个方法描述符。Java 语言选择的规则是：最具体的方法。</p><p>  简单讲就是在方法调用传递的时候不会产生任何编译时错误的前提下，一个方法比另一个方法更具体。在参数确定的 lambda 表达式或原始数据类型调用的情况下，签名可以灵活调整。<br><a id="more"></a><br>  设方法调用的参数表达为：$e_1, …, e_k$，如果一个适配的方法 $m_1$ 比另一个适配的方法 $m_2$ 更具体，需要满足以下任一个条件：</p><ol><li><p>$m_2$ 是泛方法，那么 $m_1$ 在参数 $e_1, …, e_k$ 上比 $m_2$ 更具体。(见18.5.4)</p></li><li><p>$m_2$ 不是泛方法，$m_1$ 和 $m_2$ 对于调用的适配有的宽松有的严格，$m_1$参数类型：$S_1, …, S_n$，$m_2$ 参数类型：$T_1, …, T_n$，每一个 $e_i$ 都有 $S_i$ 比 $T_i$ 更具体。</p></li><li><p>$m_2$ 不是泛方法，$m_1$ 和 $m_2$ 都适配原始类型做参数的方法调用，$m_1$ 的前 k 个变量参数是：$S_1, …, S_k$，$m_2$ 的前 k 个变量参数是：$T_1, …, T_k$，对每一个 $e_i$ 都有 $S_i$ 比 $T_i$ 更具体。但是 $m_1$ 的第 k + 1个参数是 $m_2$ 的子类型。</p></li></ol><p>上述条件仅适用于一个方法比另一个方法更具体的情况。</p><p>如果 $S &lt;: T$那么 S 比 T 类型更具体。(参见JLS4.10)</p><p>对于表达式 e， 如果 T 不是 S 的子类型，满足以下条件时，接口类型 S 才会比接口类型 T 更具体：</p><blockquote><p>设 $U_1, …, U_k$ 和 $R_1$ 分别是方法 S 的参数类型和返回类型；$V_1, …, V_k$ 和 $R_2$ 分别是方法 T 的参数类型和返回值类型。</p></blockquote><ul><li>如果 e 是特定类型的 labmda 表达式，那么下面一项成立：<ul><li>$R_2$ 是void</li><li>$R_1 &lt;: R_2$</li><li>$R_1$ 和 $R_2$ 是接口类型，至少有一个 return，且每个 e 的 return 都有$R_1$ 比 $R_2$ 更具体。<br>(代码块方法体的 lambda 表达式的 return 在15.27.2定义。表达式方法体的 lambda 表达式的 return 就是自身。)</li><li>$R_1$ 是原始类型，$R_2$ 是引用类型，至少存在一个 return，且每个 e 的 return 是独立的原始类型的表达式。</li><li>$R_1$是引用类型，$R_2$是原始类型，至少存在一个 return，且每个 e 的 return 是独立的引用类型表达式或[多项表达式][2]<br>(多项表达式这里的含义可以一句话总结：根据不同的输入情况，输出结果可能有不同的数据类型)</li></ul></li><li>如果 e 是复合表达式，情况中的一种递归应用到包含的表达式中。</li><li>如果 e 是条件表达式，对每第二个和第三个操作递归操作。</li></ul><p>方法 $m_1$ 比方法 $m_2$ 严格具体，当且仅当 $m_1$ 比 $m_2$ 更具体且 $m_2$ 不比 $m_1$更具体。</p><p>方法对于方法调用<code>最大具体</code>：可访问性和适配度没有比它更严格具体的。</p><p>如果只有一个<code>最大具体</code>的方法，那么就叫方法调用<code>最具体</code>的方法，这个最具体的方法肯定比其他可访问的适配的方法。接下来就是其他的编译时的检查的任务了，参见15.12.3。</p><p>也有可能找不到最具体的方法，可能存在多个方法是最大具体。这种情况：</p><ul><li>如果所有最大具体的方法都有<a href="#appendix">等价继承的签名</a>:<ul><li>如果只有一个方法是具体的(非 <code>abstract</code>的)，那它就是最具体的方法。</li><li>否则，如果所有的方法都是 abstract 或者默认的，所有的方法签名都有相同的擦除，那就直接取返回值最具体的那个方法。<br>这种情况下，最具体的方法可能是 abstract 的。最具体的方法可能抛出检查异常当且仅当异常或者擦除在每个最大具体方法的 throws 从句中声明。</li></ul></li><li>否则，方法调用就是<code>ambiguous</code>的，编译时错误抛出。</li></ul><p><a name="appendix"></a></p><h2 id="Appendix："><a href="#Appendix：" class="headerlink" title="Appendix："></a>Appendix：</h2><ol><li><p>继承等价的签名:</p><p> A 擦除后和 B 相同，则 A 是 B 的子方法签名，B 擦除后也和 A 相同，则两者继承等价。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123; x += dx; y += dy; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>❌同一个类里的继承等价会导致编译时错误。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionConverter</span> </span>&#123;</span><br><span class="line">    <span class="function">List <span class="title">toList</span><span class="params">(Collection c)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Overrider</span> <span class="keyword">extends</span> <span class="title">CollectionConverter</span> </span>&#123;</span><br><span class="line">    <span class="function">List <span class="title">toList</span><span class="params">(Collection c)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>❗️这里的 CollectionConverter 如果修改就会导致 Overrider 代码出错。<br>&lt;/a&gt;</p><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p>[1]: <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.5" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.5</a> Choosing the Most Specific Method<br>[2]: <a href="http://cr.openjdk.java.net/~dlsmith/jsr335-0.6.1/D.html" target="_blank" rel="noopener">http://cr.openjdk.java.net/~dlsmith/jsr335-0.6.1/D.html</a> Lambda Specification, Part D: Poly Expressions<br>[3]: <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2</a> Method Signature</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jls </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Interface一个知识点</title>
      <link href="/2018/09/26/Java-Interface%E4%B8%80%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2018/09/26/Java-Interface%E4%B8%80%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>   最近在看 Tomcat 实现相关的书籍，阅读到这样一句：“若只使用如下语句，编译器就无法知道要调用哪个构造函数，并且会报错：new URL(null, str, null)” 。就忽然想去探究一下编译器在考虑有继承的类作为参数的函数执行过程的逻辑。于是就有了这篇文章。<br>   <a id="more"></a></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>   考虑如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Parent obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method with Parent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Son obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method with Son"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//test1</span></span><br><span class="line">        test(<span class="keyword">new</span> Parent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这里输出是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method with Parent</span><br></pre></td></tr></table></figure></p><p>   这里应该不用解释了，new 出来的就是一个 Parent 对象，因此调用的自然是 Parent 为参数的方法。</p><hr><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>   考虑如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test2</span></span><br><span class="line">    Parent p = <span class="keyword">new</span> Son();</span><br><span class="line">    test(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   这里输出是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method with Parent</span><br></pre></td></tr></table></figure></p><p>   变量 p 声明的类型是 Parent，因此虽然它 new 的时候是Son，但是在传递值给 p 的时候已经擦除为 Parent 类型了，在后面，除非主动转换(显式转换)类型，不然它是 Son 的真相就被雪藏了。所以这里 test 方法只知道它是 Parent，因此调用的是 Parent 为参数的方法。</p><hr><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>   考虑如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    test(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   这里输出是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method with Son</span><br></pre></td></tr></table></figure></p><p>   这里开始就很有意思了，这一部分为什么会输出 Son 呢？2个 test 难道不是都符合条件？这里参考了文章[Java函数重载和精准度匹配][1]，简单说就是因为参数为 Son 的函数比参数为 Parent 的函数更精确。不过文章并没有深入去探究原因，后续计划有时间去查 Java 运行时的原理。<br>   通过查看编译后的字节码，可以得到的信息：Java 编译器在编译时就已经确定<code>test(null)</code>要执行的是 <code>test(Son)</code> 这个函数，指向的函数引用已经是test(Son)，甚至test(Parent)都没有放到 ConstantPool 里面。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>   考虑如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daughter</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Parent obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method with Parent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Son obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method with Son"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Daughter obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method with Daughter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   这里输出是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Ambiguous method call. Both test(Son) in InterfaceTest and test(Daughter) in InterfaceTest match.</span><br></pre></td></tr></table></figure></p><p>   这里出现异常了。是因为调用的 test 方法存在二义性：test(Son) 和 test(Daughter) 都满足条件，无法判断调用哪一个。</p><hr><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>   其实这部分最重要的知识点就是：在可以选择多个执行方法的时候，编译器如何选择？答案是：选择一个最具体的函数执行。具体执行过程参见文章：<a href="/2018/09/26/java-如何选择最具体的方法执行（翻译）/">java 如何选择最具体的方法执行（翻译）</a></p><p>参考资料：<br>[1]: <a href="https://blog.csdn.net/smartyidiot/article/details/7464454" target="_blank" rel="noopener">https://blog.csdn.net/smartyidiot/article/details/7464454</a> Java函数重载及精准度匹配</p><p>[2]: <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.5" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.5</a> Choosing the Most Specific Method</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac OS上搭建网络连通的虚拟机集群😊</title>
      <link href="/2018/07/02/Mac-OS%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4/"/>
      <url>/2018/07/02/Mac-OS%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="零、背景"><a href="#零、背景" class="headerlink" title="零、背景"></a>零、背景</h1><p>​    最近看了一些 Hadoop 相关的书籍和文章，想实现 zookeeper 的一个 demo，因此就需要在本地搭建一个 Linux 的虚拟服务器集群，这篇文章就是针对本地虚拟机的配置。<br><a id="more"></a></p><h1 id="一、安装虚拟机软件"><a href="#一、安装虚拟机软件" class="headerlink" title="一、安装虚拟机软件"></a>一、安装虚拟机软件</h1><p>​    VMware 的虚拟机软件是付费的，本着开源精神和<strong>一贫如洗的现状</strong>，于是选择了免费且开源的虚拟机软件：<a href="https://www.virtualbox.org" target="_blank" rel="noopener">VirtualBox</a>。软件的安装就不再赘述了，下载 dmg 文件双击就行了。</p><h1 id="二、安装-Linux-系统"><a href="#二、安装-Linux-系统" class="headerlink" title="二、安装 Linux 系统"></a>二、安装 Linux 系统</h1><p>​    针对 Linux 系统，我选择了<a href="http://releases.ubuntu.com/16.04/ubuntu-16.04.4-server-amd64.iso.torrent?_ga=2.224076818.808344608.1530474534-2083396476.1530192546" target="_blank" rel="noopener">16.04版本的 Ubuntu Server</a>，顺便多讲一下，Ubuntu 的Server 版本就是只有命令行的OS，而 Desktop 是安装就有（可用鼠标操作的）桌面。因为终端的操作在 MacOS 上已经熟悉过了，而且为了降低对内存的占用（桌面程序实在是太吃内存了），所以选择了 Server 版本。Ubuntu 的版本号选用了一种特别的命名方式：[年份].[月份]。主版本号是年后2位，次版本号是2位月份，最新的版本是18.04，就是2018年4月才发布的。强烈不推荐你试用最新的版本，因为最新的可能更新了很多新特性，而社区和网络上对应的教程、问答都还很少，出了问题不好检索原因。使用16.04就够了。</p><p>​    至于在 VirtualBox 上安装 Ubuntu 的过程，全程按照他提示做就行了，设置好用户名和密码。需要注意的地方是：</p><h4 id="第一步的选择语言，请不要选择中文！"><a href="#第一步的选择语言，请不要选择中文！" class="headerlink" title="第一步的选择语言，请不要选择中文！"></a><strong>第一步的选择语言，请不要选择中文！</strong></h4><p>​    后续的步骤还有选择语言界面，到时再选择中文就行了。血的教训：第一步就选择了中文会导致安装过程被中断，无法安装。当然，一个仅有命令行的 OS，选择英语也不构成上手难度，推荐全英文，避免潜在的任何语言问题！</p><h1 id="三、配置虚拟机网络设置"><a href="#三、配置虚拟机网络设置" class="headerlink" title="三、配置虚拟机网络设置"></a>三、配置虚拟机网络设置</h1><p>​    这一步是重点。</p><h5 id="先在-VirtualBox-中设置项中添加一个主机网络配置："><a href="#先在-VirtualBox-中设置项中添加一个主机网络配置：" class="headerlink" title="先在 VirtualBox 中设置项中添加一个主机网络配置："></a>先在 VirtualBox 中设置项中添加一个主机网络配置：</h5><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/vm-add-host-only-config.png" alt="添加主机网络"></p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/vm-host-only-config.png" alt="仅主机模式网络"></p><p>​    记住这里的 IPv4 的 IP 哦，后面设置各个虚拟机的网络的时候还会用到！</p><h5 id="再将虚拟机的网络设置修改为如下2个网卡的配置："><a href="#再将虚拟机的网络设置修改为如下2个网卡的配置：" class="headerlink" title="再将虚拟机的网络设置修改为如下2个网卡的配置："></a>再将虚拟机的网络设置修改为如下2个网卡的配置：</h5><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/vm-eth1-config.png" alt="网卡1配置"></p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/vm-eth2-config.png" alt="网卡2配置"></p><p>​    然后就可以进入系统继续操作了。</p><h5 id="在虚拟机内输入"><a href="#在虚拟机内输入" class="headerlink" title="在虚拟机内输入"></a>在虚拟机内输入</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure><p>​    查看所有网卡的状态，这个时候应该有2个虚拟网卡分别是<code>enp0s3</code>和<code>enp0s8</code>，他们对应网卡1和网卡2，分别用于和主机通信与和外网通信。</p><h5 id="接下来在虚拟机中继续输入sudo-vi-etc-network-interfaces编辑网卡设置。"><a href="#接下来在虚拟机中继续输入sudo-vi-etc-network-interfaces编辑网卡设置。" class="headerlink" title="接下来在虚拟机中继续输入sudo vi /etc/network/interfaces编辑网卡设置。"></a>接下来在虚拟机中继续输入<code>sudo vi /etc/network/interfaces</code>编辑网卡设置。</h5><p>   当前内容应该是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Host-only interface</span><br><span class="line">auto eth1 </span><br><span class="line">iface eth1 inet dhcp</span><br></pre></td></tr></table></figure><p>​    第一部分是127.0.0.1的那个网卡的配置，本地连接，不用管它。后面 eth1是网卡1的配置信息，但是名称不对，网卡2的配置信息也是缺失的。所以修改该文件为如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Host-only interface</span><br><span class="line">auto enp0s3 </span><br><span class="line">iface enp0s3 inet static</span><br><span class="line">address192.168.56.101</span><br><span class="line">netmask255.255.255.0</span><br><span class="line">network192.168.56.0</span><br><span class="line">boardcast192.168.56.255</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>NAT interface</span><br><span class="line">auto enp0s8</span><br><span class="line">iface enp0s8 inet dhcp</span><br></pre></td></tr></table></figure><p>​    用人话说就是：把 host only 网卡修改为固定 IP，把 NAT 网卡修改为 自动分配 IP。注意这里设定的 IP 的特点：跟上面 VirtualBox 添加的 Host-only 配置要保证在同一个网段！这样才能组成一个子网络。</p><p>​        重新启动虚拟机，再次输入 <code>ifconfig</code>查看网卡状态，是否有一个 IP 为<code>192.168.56.101</code>的名为<code>enp0s3</code>的网卡？和一个分配了 IPv4 地址的名为<code>enp0s8</code>的网卡？</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/ifconfig-result.png" alt="ifconfig 结果"></p><p>​    紧接着在虚拟机内分别 <code>ping</code>主机（192.168.56.1）和 baidu.com测试，最后都到了返回。</p><p><img src="/images/placeholder.png" alt="ping 结果" data-src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/ping-result.png" class="lazyload"></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>​    总体上说这一篇的内容不多也不复杂，但是中间走了很多弯路，踩了很多坑。其实做很多东西都是一样，坑踩过了才会不再掉进去，所以不管做了什么，留下一份记录既是对别人的帮助也是对自己的激励！😆</p><p>​    最近还在做 redux 的TodoList 尝试，机器学习算法的学习以及众包论文的阅读和思考。后续可能更偏向于理论知识的学习了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React实现异步加载数据</title>
      <link href="/2018/06/13/React%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/06/13/React%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="零、引言"><a href="#零、引言" class="headerlink" title="零、引言"></a>零、引言</h1><p>​    熟悉了 React 编写组件的方式，我们自然就想到了一个实际工程中非常常见的一个需求：网络条件差、而请求数据量大的时候，需要的是页面先显示出来，然后异步请求数据填充进去。这样用户体验会更好。<br><a id="more"></a></p><h1 id="一、后台程序-API-实现"><a href="#一、后台程序-API-实现" class="headerlink" title="一、后台程序 API 实现"></a>一、后台程序 API 实现</h1><p>​    用 java 写一个简单的 WebAPI 返回数据，这里我们以昨天的步骤条为例，返回一个步骤条的三个步骤的内容数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/steps"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StepApi</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//get the data;</span></span><br><span class="line">        List&lt;StepModel&gt; steps = getStepData();</span><br><span class="line">        String json = JSONObject.toJSONString(steps);</span><br><span class="line">        <span class="comment">//+延时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            out.append(json);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    为了更好的观察效果，我们对这个接口加上 1S 的延迟。</p><p>​    结果如下（假设我们做的是支付宝提现的步骤）：</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/steps-api-response.png" alt="请求结果"></p><h1 id="二、React-组件的更新"><a href="#二、React-组件的更新" class="headerlink" title="二、React 组件的更新"></a>二、React 组件的更新</h1><p>​    这里我们主要用到的一个方法是：componentDidMount()。顾名思义，就是组件加载完毕之后执行的方法。我们这里顺便用上了 ES6 的Promise 语法（实际作用有待验证！）</p><p>​    首先写一个通用的获取数据方法readData：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readData = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getSteps</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">let</span> json = <span class="keyword">await</span> response.text();</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个函数是 async 的，因此返回的是一个 Promise 对象，需要 readData.then()对数据继续操作。</p><p>​    然后我们需要在组件内部（就是 Progress 这个 class 里面）实现 componentDidMount 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    readData(<span class="string">"http://localhost:8080/steps"</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">steps</span>: data&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    接着，我们要把 render 方法里写 steps 的地方修改一点点，之前用的是全局变量 steps，我们这里设置 steps 为 this.state.steps 就 OK 了。（const {current} = this.state 也要改为const current = this.state.current 哦，因为 state 成员不止一个了嘛。）</p><p>​    最后，我们需要给这个组件设定一个数据的 placeholder。在组件的constructor 函数（构造函数）里，state 增加一个 steps 字段，值设置为数据没加载出来时期望的内容（比如：Step1、Step2这样的）。</p><p>​    总结起来一共4点：</p><ol><li><p>编写 async 的获取数据的函数。</p></li><li><p>组件实现 componentDidMount 方法。</p></li><li><p>render 里的数据获取方式从固定值变成从 state 里面提取。</p></li><li><p>设置 state 里数据的初始值。</p><p>记得看看有没有遗漏！</p></li></ol><h1 id="三、运行情况和调试"><a href="#三、运行情况和调试" class="headerlink" title="三、运行情况和调试"></a>三、运行情况和调试</h1><p>​    然后我们就可以用 <code>npm start</code>  命令启动项目啦。😄看看是否首先看到组件的内容为 placeholder ，过了1s 才显示出我们需要的数据呢？</p><blockquote><p>​    (我的运行结果)</p></blockquote><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/react-async-request.gif" alt=""></p><p>​    如果没有按照我们期望的显示怎么办？☹️我们就有必要对前端进行调试了。调试的方法也很简单，我们监控 state 的变化情况，就掌控了运行有没有按照我们的计划运行。我们在 render 的 return 之前增加一行语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">debugger</span>;</span><br></pre></td></tr></table></figure><p>​    打开浏览器的开发者工具，刷新页面。</p><p>​    这样，浏览器在运行到这里的时候就会自动停止下来，进入断点。这个时候再在浏览器的调试器界面监视 <code>this.state</code> 就可以看到数据是否被正确取出。</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/safari-debugger.png" alt=""></p><p>​    如上图，我们就可以看到，第一次进入 debugger 的时候数据是 placeholder 里的，第二次的时候就是来自于我们异步请求的数据了。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>​    数据是组件的灵魂。我们采用异步的方式去加载组件数据，在网络加载缓慢的情况下仍然可以预览到提示信息，效果等同于 img 标签的 alt。也比较符合现在异步加载的趋势。</p><h1 id="五、后续"><a href="#五、后续" class="headerlink" title="五、后续"></a>五、后续</h1><p>​    计划将这个项目部署到 github，并且在项目基础上进一步完善。能做出一个完整的项目。</p><h1 id="六、更新"><a href="#六、更新" class="headerlink" title="六、更新"></a>六、更新</h1><p>​    项目让<a href="http://ygy.online" target="_blank" rel="noopener">@光耀</a>大佬过目以后，他指出项目中异步获取的方式有问题。具体就是：async 和 await 配合使用可以解决 Promise 写法外部读取不到返回的数据的问题，这里继续采用 then 去处理数据就失去了写 async 的意义了。因此修改了这部分的代码。具体变动见<a href="https://github.com/xiaohaoxing/react-app/commit/6247658eabffebdf188b84ebb1201d9b9d700978" target="_blank" rel="noopener">github</a>。变化不多但是涉及的原理挺深入的。还需要继续学习呀！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>First React Project</title>
      <link href="/2018/06/11/First-React-Project/"/>
      <url>/2018/06/11/First-React-Project/</url>
      
        <content type="html"><![CDATA[<h1 id="零、前提要求"><a href="#零、前提要求" class="headerlink" title="零、前提要求"></a>零、前提要求</h1><p>​    React 的开发和传统前端开发并不相同，因此要求也更高，这里我个人认为需要做到下面步骤不会懵逼，至少需要：</p><ol><li>能独立用传统 HTML+CSS 构建简单的 web 页面，不要求美观，至少能按照要求任意调整布局。</li><li>了解现代化的 flex 布局。</li><li>会写 JS 事件，对 ES6中的面向对象和模块化有理解。</li><li>简单的命令行操作以及了解 node 和 npm 一些命令。</li><li>React 入门，推荐博客：<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">阮一峰 React 教程</a>，内容不多，但是很实用。<a id="more"></a><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1></li></ol><p>需要环境：</p><ol><li><p>node</p></li><li><p>npm</p></li></ol><h1 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h1><p>​    在以上2个命令可以在Terminal 里面直接运行之后，就可以开始创建React 项目了。npm 给我们提供了一个完整的可以直接运行的项目模板。在Terminal 里输入以下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app [demo]</span><br></pre></td></tr></table></figure><p>​    等待一会儿，就在当前目录下生成一个 demo 文件夹，里面便有我们react 项目运行的完整结构。接着输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd demo</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>​    项目便会自动执行编译等步骤，最后会用 node 将项目运行在默认端口3000，并打开浏览器进入 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 运行。并显示启动页。</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/react-homepage.png" alt=""></p><p>​    (下面还有一点欢迎文字被我删了= =)</p><p>​    根目录下的index.js 是项目运行的入口，在这里写的 ReactDOM.render() 可以看出把 App 组件绑定到#root 页面元素上，所以 App 这里是代表了整个页面的一个组件。我们自己的组件就可以加入到 App 组件里面，就可以显示在页面上了。</p><h1 id="三、添加组件"><a href="#三、添加组件" class="headerlink" title="三、添加组件"></a>三、添加组件</h1><p>​    创建项目之后就应该往里面添加自己的组件。其实现在前端开发的组件高度重复，因此 <a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design</a> 给我们提供了相当多可以通用的组件，我们选择其中的<a href="https://ant.design/components/steps-cn/" target="_blank" rel="noopener">“步骤条”</a>来学习。</p><h4 id="1-导入-antd-库"><a href="#1-导入-antd-库" class="headerlink" title="1. 导入 antd 库"></a>1. 导入 antd 库</h4><p>​    在Terminal 输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install antd --save</span><br></pre></td></tr></table></figure><p>​    就完整导入了完整的 ant 库。也可以按照需求导入组件，这里不介绍了。</p><h4 id="2-创建组件"><a href="#2-创建组件" class="headerlink" title="2. 创建组件"></a>2. 创建组件</h4><p>​    在 src 中新建一个目录 component 作为组件的根目录，在里面新建文件progress.js。</p><h5 id="引入React-库、组件库、组件样式："><a href="#引入React-库、组件库、组件样式：" class="headerlink" title="引入React 库、组件库、组件样式："></a>引入React 库、组件库、组件样式：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Steps, Button, message&#125; <span class="keyword">from</span> <span class="string">"antd"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'antd/dist/antd.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Step = Steps.Step;<span class="comment">//缩短使用 Step 的代码</span></span><br></pre></td></tr></table></figure><h5 id="添加步骤的节点数据："><a href="#添加步骤的节点数据：" class="headerlink" title="添加步骤的节点数据："></a>添加步骤的节点数据：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> steps = [&#123;</span><br><span class="line">    title:<span class="string">"Step1"</span>,</span><br><span class="line">    description:<span class="string">"The First"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    title:<span class="string">"Step2"</span>,</span><br><span class="line">    description:<span class="string">"The Second"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">   title:<span class="string">"Step3"</span>,</span><br><span class="line">   description:<span class="string">"The Third"</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h5 id="组件本身："><a href="#组件本身：" class="headerlink" title="组件本身："></a>组件本身：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Progress</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            current:<span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    next()&#123;</span><br><span class="line">        <span class="keyword">const</span> current = <span class="keyword">this</span>.state.current + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;current&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    prev()&#123;</span><br><span class="line">        <span class="keyword">const</span> current = <span class="keyword">this</span>.state.current - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;current&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;current&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Steps current=&#123;current&#125; style=&#123;&#123;<span class="attr">width</span>:<span class="number">90</span>+<span class="string">"%"</span>&#125;&#125;&gt;</span><br><span class="line">                    &#123;steps.map(<span class="function"><span class="params">i</span>=&gt;</span>&lt;Step key=&#123;i.title&#125; title=&#123;i.title&#125; description=&#123;i.description&#125;/&gt;)&#125;</span><br><span class="line">                &lt;/Steps&gt;</span><br><span class="line">                &lt;div className=<span class="string">"steps-content"</span> style=&#123;&#123;<span class="attr">padding</span>:<span class="number">10</span>&#125;&#125;&gt;&#123;steps[<span class="keyword">this</span>.state.current].description&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div className="steps-btns"&gt;</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    this.state.current &lt; steps.length - 1</span></span><br><span class="line"><span class="regexp">                    &amp;&amp;</span></span><br><span class="line"><span class="regexp">                    &lt;Button type="primary" onClick=&#123;()=&gt;this.next()&#125;&gt;Next&lt;/</span>Button&gt;</span><br><span class="line">                &#125;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.state.current === steps.length - <span class="number">1</span></span><br><span class="line">                    &amp;&amp;</span><br><span class="line">                    &lt;Button type=<span class="string">"primary"</span> onClick=&#123;()=&gt;message.success(<span class="string">"Finished!"</span>)&#125;&gt;Done&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    this.state.current &gt; 0</span></span><br><span class="line"><span class="regexp">                    &amp;&amp;</span></span><br><span class="line"><span class="regexp">                    &lt;Button type="primary" style=&#123;&#123;marginLeft:8&#125;&#125; onClick=&#123;()=&gt;this.prev()&#125;&gt;Previous&lt;/</span>Button&gt;</span><br><span class="line">                &#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：next、prev 方法，current 都是Steps 组件需要的。render 是输出函数，其中按钮相关的代码用到了 JS 中的短路知识。</p><h5 id="暴露出组件："><a href="#暴露出组件：" class="headerlink" title="暴露出组件："></a>暴露出组件：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Pregress</span><br></pre></td></tr></table></figure><p>到这里，组件的编写就完成了。需要在页面中显示，就需要在 App 组件中加上我们的组件。</p><h4 id="3-插入-App-组件中"><a href="#3-插入-App-组件中" class="headerlink" title="3. 插入 App 组件中"></a>3. 插入 App 组件中</h4><p>​    打开 App.js，在 render 的 return 的 JSX 中插入我们的组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        ……</span><br><span class="line">        &lt;Progress&gt;&lt;/Progress&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-查看效果"><a href="#4-查看效果" class="headerlink" title="4. 查看效果"></a>4. 查看效果</h4><p>​    这时保存文件，框架会自动检测变化并更新页面。打开浏览器就可以看到我们添加的组件了~</p><p><img src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/blog/react-component-progress.png" alt="Progress 组件"></p><p>​    点击下面的按钮就可以看到绑定的事件触发，具体原理结合上面代码理解~</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>​    完成上面的组件的总结：React 的项目确实比传统开发更加省事，找到合适的组件并拼装起来就可以了。结合最近看的同构 Javascript，可以看出，这种现代化的开发已经可以从根本上避免同步+异步方式获取数据需要重写2遍代码的弊端（因为所有数据都是异步了）。回调陷阱也可以通过组件化和 state 这种事件机制得到避免。</p><h1 id="五、后续计划"><a href="#五、后续计划" class="headerlink" title="五、后续计划"></a>五、后续计划</h1><p>但是在高效的开发之下，其中的原理也是值得去学习的。后续还需要学习 Redux，并结合后台的 Restful 风格接口作出jsonp 的跨域web 应用解决方案。</p><p>参考资料：</p><ol><li>Ant Design React 组件库[<a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">https://ant.design/docs/react/introduce-cn</a>]</li><li>阮一峰 React 入门教程[<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/03/react.html</a>]</li><li>七牛云对象存储[<a href="https://portal.qiniu.com/bucket" target="_blank" rel="noopener">https://portal.qiniu.com/bucket</a>] （不仅可以存图像，还可以部署静态网站哦）</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Hexo在github.io搭建博客</title>
      <link href="/2018/01/13/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github-io%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/01/13/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github-io%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>受学长影响接触到Hexo，加上之前在<a href="xiaohaoxing.github.io">github.io</a>上经常测试一些前端的小例子，于是决定使用Hexo在github上搭建一个博客。</p><p>以后这里主要写编程相关的一些记录，以备后续检索。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
